teste = normaliza(exemplo)
teste = normaliza(exemplo)
teste = normaliza(exemplo) %>%
transforma()
library(tidyverse)
#Criação das matrizes
exemplo = list(CF=CF,A=A,PS=PS,RV=RV,M=M,FP=FP)
teste = normaliza(exemplo)
teste
teste[[6]][1]*teste[[1]][1]
teste[[6]][1]*teste[[1]][1] + teste[[6]][2]*teste[[2]][1] + teste[[6]][3]*teste[[3]][1] + teste[[6]][4]*teste[[4]][1] + teste[[6]][5]0*teste[[5]][1]
teste[[6]][1]*teste[[1]][1] + teste[[6]][2]*teste[[2]][1] + teste[[6]][3]*teste[[3]][1] + teste[[6]][4]*teste[[4]][1] + teste[[6]][5]0*teste[[5]][1]
teste[[6]][1]*teste[[1]][1] + teste[[6]][2]*teste[[2]][1]
teste[[6]][1]*teste[[1]][1] + teste[[6]][2]*teste[[2]][1]  +
teste[[6]][3]*teste[[3]][1] +
teste[[6]][4]*teste[[4]][1] +
teste[[6]][5]*teste[[5]][1]
AAA(exemplo)
?Re
?eigen
Re(c(1,2,3))
Re(c(1,2,3,5,3,2))
Re(c(1,2,3,5,3,2,1,1))
### VER SE ESTÀ FUNCIONANDO!!!
AAA = function(lista){
tabela = c(0,0,0.58,0.9,1.12,1.24,1.32,1.41,1.45)
Autoval = list()
print(lista)
for(i in 1:length(lista)){
Autoval[[i]] = c(eigen(lista[[i]])$values[1],(abs(Re(eigen(lista[[i]])$values)[1]-length(lista[[i]][1,]))/(length(lista[[i]][1,])-1))/tabela[length(lista[[i]][1,])])
}
names(Autoval) = rep("Autovalor/Índice de consistência",length(Autoval))
return(Autoval)
}
AAA(exemplo)
### VER SE ESTÀ FUNCIONANDO!!!
AAA = function(lista){
tabela = c(0,0,0.58,0.9,1.12,1.24,1.32,1.41,1.45)
Autoval = list()
print(lista)
for(i in 1:length(lista)){
Autoval[[i]] = c(Re(eigen(lista[[i]])$values)[1],(abs(Re(eigen(lista[[i]])$values)[1]-length(lista[[i]][1,]))/(length(lista[[i]][1,])-1))/tabela[length(lista[[i]][1,])])
}
names(Autoval) = rep("Autovalor/Índice de consistência",length(Autoval))
return(Autoval)
}
AAA(exemplo)
### VER SE ESTÀ FUNCIONANDO!!!
AAA = function(lista){
tabela = c(0,0,0.58,0.9,1.12,1.24,1.32,1.41,1.45)
Autoval = list()
print(lista)
for(i in 1:length(lista)){
Autoval[[i]] = c(eigen(lista[[i]])$values[1],(abs(Re(eigen(lista[[i]])$values)[1]-length(lista[[i]][1,]))/(length(lista[[i]][1,])-1))/tabela[length(lista[[i]][1,])])
}
names(Autoval) = rep("Autovalor/Índice de consistência",length(Autoval))
return(Autoval)
}
AAA(exemplo)
### VER SE ESTÀ FUNCIONANDO!!!
AAA = function(lista){
tabela = c(0,0,0.58,0.9,1.12,1.24,1.32,1.41,1.45)
Autoval = list()
print(lista)
for(i in 1:length(lista)){
Autoval[[i]] = c(Re(eigen(lista[[i]])$values)[1],(abs(Re(eigen(lista[[i]])$values)[1]-length(lista[[i]][1,]))/(length(lista[[i]][1,])-1))/tabela[length(lista[[i]][1,])])
}
names(Autoval) = rep("Autovalor/Índice de consistência",length(Autoval))
return(Autoval)
}
?re
?Re
Re(4,2)
Re(c(1,2,3,4)[1])
Re(c(1,2,3,4)[2])
Re(-2)
Re(3.3)
Im(c(1,2,3,))
Im(c(1,2,3,4))
#Tenho que nomear as matrizes
#Precisa definir o número de alternativas (m=3)
#Precisa definir o número de critérios (k=5)
#Vai ler k matrizes (MACi, i=1, ..., k) mxm que comparam as alternativas para cada critério
#Vai ler uma matriz (MCC) kxk que compara os critérios
CF = matrix(c(1,1/3,1/6,3,1,1/2,6,2,1),nrow = 3,byrow = T) #nome MAC1
eigen(CF)
max(eigen(CF)$values)
max(eigen(A)$values)
eigen(A)
max(eigen(A)$values)
max(Re(eigen(A)$values))
#Criação das matrizes
exemplo = list(CF=SDFASDF,A=A,PS=PS,RV=RV,M=M,FP=FP)
#Criação das matrizes
exemplo = list(ASASSA=CF,A=A,PS=PS,RV=RV,M=M,FP=FP)
teste = normaliza(exemplo) %>%
transforma()
dados=junta(exemplo)
dados
teste
library(tidyverse)
#Tenho que nomear as matrizes
#Precisa definir o número de alternativas (m=3)
#Precisa definir o número de critérios (k=5)
#Vai ler k matrizes (MACi, i=1, ..., k) mxm que comparam as alternativas para cada critério
#Vai ler uma matriz (MCC) kxk que compara os critérios
CF = matrix(c(1,1/3,1/6,3,1,1/2,6,2,1),nrow = 3,byrow = T) #nome MAC1
tibble(CF)
teste = mtcars
tibble(mtcars)
as_tibble(mtcars)
library(tidyverse)
library(readxl)
exemplo = lapply(excel_sheets("F://+AHP//+AHP//+Documentação"), read_excel,"F://+AHP//+AHP//+Documentação")
exemplo = lapply(excel_sheets("F://AHP//AHP//Documentação"), read_excel,"F://AHP//AHP//Documentação")
?excel_sheets
excel_sheets("F://AHP//AHP//Documentação")
library(readxl)
BD_teste <- read_excel("Documentação/BD_teste.xlsx")
View(BD_teste)
excel_sheets("F://AHP//AHP//Documentação")
exemplo = lapply(excel_sheets("F://AHP//AHP//Documentação//BD_teste.xlsx"), read_excel,"F://AHP//AHP//Documentação//BD_teste.xlsx")
excel_sheets("F://AHP//AHP//Documentação//BD_teste.xlsx")
exemplo = lapply(excel_sheets("F://AHP//AHP//Documentação//BD_teste.xlsx"), read_excel, path = "F://AHP//AHP//Documentação//BD_teste.xlsx")
exemplo = lapply(excel_sheets("F://AHP//AHP//Documentação//BD_teste.xlsx"), read_excel, path = "F://AHP//AHP//Documentação//BD_teste.xlsx")
View(exemplo)
exemplo
names(exemplo) = excel_sheets("F://AHP//AHP//Documentação//BD_teste.xlsx")
exemplo
# Ler diretamente da planilha do excel.
Ler = function(path){
exemplo = lapply(excel_sheets(path), read_excel, path = path)
names(exemplo) = excel_sheets(path)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
# Ler diretamente da planilha do excel.
Ler = function(path){
exemplo = lapply(excel_sheets(path), read_excel, path = path)
names(exemplo) = excel_sheets(path)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
# Ler diretamente da planilha do excel.
Ler = function(path){
exemplo = lapply(excel_sheets(path), read_excel, path = path)
names(exemplo) = excel_sheets(path)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
?lapply
exemplo
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(path){
exemplo = lapply(excel_sheets(path), read_excel, path = path)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
exemplo
?read_excel
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(path){
exemplo = lapply(excel_sheets(path), read_excel(col_names = F), path = path)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(path){
exemplo = lapply(excel_sheets(path), read_excel, path = path)
names(exemplo) = excel_sheets(path)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
exemplo
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(path){
exemplo = lapply(excel_sheets(path), read_excel, path = path)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
exemplo
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(path1){
exemplo = lapply(excel_sheets(path), read_excel, path = path1)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(path1){
exemplo = lapply(excel_sheets(path), read_excel, path = path1)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
View(exemplo)
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(caminho){
exemplo = lapply(excel_sheets(caminho), read_excel, path = caminho)
names(exemplo) = excel_sheets(caminho)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
View(exemplo)
caminho
exemplo
names(exemplo)
?read_excel
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(caminho){
exemplo = lapply(excel_sheets(caminho), read_excel(col_names = F), path = caminho)
names(exemplo) = excel_sheets(caminho)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(caminho){
exemplo = lapply(excel_sheets(caminho), read_excel(caminho, col_names = F), path = caminho)
names(exemplo) = excel_sheets(caminho)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(caminho){
exemplo = lapply(excel_sheets(caminho), read_excel(path = caminho, col_names = F), path = caminho)
names(exemplo) = excel_sheets(caminho)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(caminho){
exemplo = lapply(excel_sheets(caminho), read_excel, path = caminho, col_names = F)
names(exemplo) = excel_sheets(caminho)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
exemplo
normaliza = function(lista){
lista_aux = list()
for( i in 1:length(lista)){
aux = lista[[i]] %>%  apply(2,sum)
lista[[i]] = t(apply(lista[[i]], 1, function(x)x/aux))
lista_aux[[i]] = apply(lista[[i]],1, sum)/length(lista[[i]][1,])
}
names(lista_aux) = names(lista)
return(lista_aux)
}
transforma = function( lista ){
item = rep(LETTERS[1:length(lista[[1]])],each = length(lista)-1 )
criterio = rep(names(lista)[-length(names(lista))],length(unique(item)))
prob = NULL
for( i in 1:length(lista[[1]])){
prob = c(prob,unlist(lapply(lista[-length(lista)], function(x)x[i])))
}
peso = rep(lista[[length(lista)]], length(unique(item)))
dados = tibble(item,criterio,prob,peso)
return(dados)
}
xablau = function(dados) {
dados %>%
mutate(valor = prob*peso) %>%
group_by(item) %>%
summarise(xablau = sum(valor)) %>%
return()
}
# Vai concatenar todas as funçoes
junta = function(lista){
lista_aux = normaliza(lista)
lista_aux2 = transforma(lista_aux)
lista_final = xablau(lista_aux2)
return(lista_final)
}
### VER SE ESTÀ FUNCIONANDO!!!
AAA = function(lista){
tabela = c(0,0,0.58,0.9,1.12,1.24,1.32,1.41,1.45)
Autoval = list()
print(lista)
for(i in 1:length(lista)){
Autoval[[i]] = c(Re(eigen(lista[[i]])$values)[1],(abs(Re(eigen(lista[[i]])$values)[1]-length(lista[[i]][1,]))/(length(lista[[i]][1,])-1))/tabela[length(lista[[i]][1,])])
}
names(Autoval) = rep("Autovalor/Índice de consistência",length(Autoval))
return(Autoval)
}
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
Ler = function(caminho){
exemplo = lapply(excel_sheets(caminho), read_excel, path = caminho, col_names = F)
names(exemplo) = excel_sheets(caminho)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
teste = normaliza(exemplo) %>%
transforma()
teste
dados=junta(exemplo)
AAA(exemplo)
teste = normaliza(exemplo)
dados
?lapply
?apply
apply(exemplo, A, sum)
apply(exemplo, exemplo[[1]],sum)
apply(exemplo, exemplo[[1]],sum())
apply(exemplo[[1]], 1, sum)
apply(exemplo[[1]], 2, sum)
exemplo[[1]]
devtools::setup()
devtools::setup(rstudio=F)
library(tidyverse)
library(readxl)
#Função para normalização da matriz de julgamentos
normaliza = function(lista){
lista_aux = list()
for( i in 1:length(lista)){
aux = lista[[i]] %>%  apply(2,sum)
lista[[i]] = t(apply(lista[[i]], 1, function(x)x/aux))
lista_aux[[i]] = apply(lista[[i]],1, sum)/length(lista[[i]][1,])
}
names(lista_aux) = names(lista)
return(lista_aux)
}
#Bunitação
transforma = function( lista ){
item = rep(LETTERS[1:length(lista[[1]])],each = length(lista)-1 )
criterio = rep(names(lista)[-length(names(lista))],length(unique(item)))
prob = NULL
for( i in 1:length(lista[[1]])){
prob = c(prob,unlist(lapply(lista[-length(lista)], function(x)x[i])))
}
peso = rep(lista[[length(lista)]], length(unique(item)))
dados = tibble(item,criterio,prob,peso)
return(dados)
}
xablau = function(dados) {
dados %>%
mutate(valor = prob*peso) %>%
group_by(item) %>%
summarise(xablau = sum(valor)) %>%
return()
}
# Vai concatenar todas as funçoes
junta = function(lista){
lista_aux = normaliza(lista)
lista_aux2 = transforma(lista_aux)
lista_final = xablau(lista_aux2)
return(lista_final)
}
### VER SE ESTÀ FUNCIONANDO!!!
AAA = function(lista){
tabela = c(0,0,0.58,0.9,1.12,1.24,1.32,1.41,1.45)
Autoval = list()
print(lista)
for(i in 1:length(lista)){
Autoval[[i]] = c(Re(eigen(lista[[i]])$values)[1],(abs(Re(eigen(lista[[i]])$values)[1]-length(lista[[i]][1,]))/(length(lista[[i]][1,])-1))/tabela[length(lista[[i]][1,])])
}
names(Autoval) = rep("Autovalor/Índice de consistência",length(Autoval))
return(Autoval)
}
#Tenho que nomear as matrizes
#Precisa definir o número de alternativas (m=3)
#Precisa definir o número de critérios (k=5)
#Vai ler k matrizes (MACi, i=1, ..., k) mxm que comparam as alternativas para cada critério
#Vai ler uma matriz (MCC) kxk que compara os critérios
"CF = matrix(c(1,1/3,1/6,3,1,1/2,6,2,1),nrow = 3,byrow = T) #nome MAC1
A = matrix(c(1,1/2,1/2,2,1,2,2,1/2,1),nrow = 3,byrow = T) #nome MAC2
PS = matrix(c(1,1,2,1,1,1,1/2,1,1),nrow = 3,byrow = T) #nome MAC3
RV = matrix(c(1,2,3,1/2,1,2,1/3,1/2,1),nrow = 3,byrow = T) #nome MAC4
M = matrix(c(1,5,3,1/5,1,1/3,1/3,3,1),nrow = 3,byrow = T) #nome MAC5
FP = matrix(c(1,1/5,3,1/5,1/3,5,1,5,3,3,1/3,1/5,1,1/3,1/3,5,1/3,3,1,1,3,1/3,3,1,1),nrow = 5,byrow = T) #nome MCC
exemplo = list(CF=CF,A=A,PS=PS,RV=RV,M=M,FP=FP)
"
# Ler diretamente da planilha do excel. Retorna uma lista de tibbles.
# Lembrar que na arrumação das planilhas do excel devemos ter :
# MAC1, .... , MACn , MCC
# As planilhas devem ser nomeadas
# A primeira coluna da mcc tem que ser a primeira planilha........
Ler = function(caminho){
exemplo = lapply(excel_sheets(caminho), read_excel, path = caminho, col_names = F)
names(exemplo) = excel_sheets(caminho)
return(exemplo)
}
exemplo = Ler("F://AHP//AHP//Documentação//BD_teste.xlsx")
#Criação das matrizes
teste = normaliza(exemplo) %>%
transforma()
dados=junta(exemplo)
AAA(exemplo)
teste = normaliza(exemplo)
AHP = function(caminho){
BD = Ler
}
AHP = function(caminho){
BD = Ler(caminho)
BD = normaliza(BD)
BD = transforma(BD)
BD = xablau(BD)
return(BD)
}
AHP("F://AHP//AHP//Documentação//BD_teste.xlsx")
Probs = AHP("F://AHP//AHP//Documentação//BD_teste.xlsx")
Probs
teste = normaliza(exemplo) %>%
transforma()
dados=junta(exemplo)
AAA(exemplo)
teste = normaliza(exemplo)
teste
teste = normaliza(exemplo)
teste
teste = normaliza(exemplo) %>%
transforma()
teste
# Função pronta que junta todas as funções criadas para gerar o produto final.
AHP = function(caminho){
BD = Ler(caminho) %>%
normaliza() %>%
transforma() %>%
xablau()
return(BD)
}
Probs = AHP("F://AHP//AHP//Documentação//BD_teste.xlsx")
Probs
devtools::use_package("tidyverse")
devtools::use_package("dplyr")
devtools::use_package("readxl")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
?AHP
devtools::load_all()
?AHP
devtools::document()
?AHP
devtools::document()
?AHP
devtools::document()
?AHP
devtools::document()
?AHP
devtools::document()
?AHP
devtools::use_vignette()
devtools::use_vignette("AHP")
devtools::document()
devtools::install()
devtools::install()
devtools::install()
library(AHP)
AHP("F://AHP//AHP//Documentação//BD_teste.xlsx")
library(AHP)
devtools::install()
devtools::document()
devtools::load_all()
AHP::AHP("F://AHP//AHP//Documentação//BD_teste.xlsx")
devtools::load_all()
devtools::document()
devtools::install()
AHP::AHP("F://AHP//AHP//Documentação//BD_teste.xlsx")
AHP::AHP("F://AHP//AHP//Documentação//BD_teste.xlsx")
AHP("F://AHP//AHP//Documentação//BD_teste.xlsx")
devtools::document()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::document()
load("~/GitHub/AHP/data/dados1.rda")
View(dados1)
load("~/GitHub/AHP/data/dados2.rda")
View(dados2)
View(dados1)
View(dados2)
View(dados1)
View(dados1)
dados1
320/12
knitr::opts_chunk$set(echo = TRUE)
caminho=choose.files()
tabela_ahp_xlsx()
dados=choose.files()
dados=choose.files()
caminho=choose.files()
tabela_ahp_xlsx(caminho)
require(AHP)
tabela_ahp_xlsx(caminho)
caminho
caminho
caminho="C:\\Users\\TPC02\\Documents\\GitHub\\AHP\\data\\BD_teste1.xlsx"
caminho
tabela_ahp_xlsx(caminho)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github('Lyncoln/AHP')
require(AHP)
tabela_ahp_xlsx(caminho)
Ler(caminho)
?Ler
caminho
caminho="C:\\Users\\TPC02\\Documents\\GitHub\\AHP\\data\\BD_teste1.xlsx"
resultado=tabela_ahp_xlsx(caminho)
resultado
View(resultado)
resultado
